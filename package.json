{
  "name": "generate-local-commit",
  "displayName": "Generate Local Commit",
  "description": "Generate commit messages locally using Ollama API",
  "publisher": "falkonps",
  "version": "1.0.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/FALKONPS/generate-local-commit"
  },
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Other",
    "SCM Providers"
  ],
  "activationEvents": [
    "onView:generate-local-commit.quickActionsView",
    "onView:generate-local-commit.historyView",
    "onCommand:generate-local-commit.generateCommitMessage",
    "onCommand:generate-local-commit.openSettings"
  ],
  "main": "./src/extension.js",
  "icon": "ollama.png",
  "contributes": {
    "commands": [
      {
        "command": "generate-local-commit.generateCommitMessage",
        "title": "Generate Commit Message using Ollama",
        "icon": {
          "light": "ollama.png",
          "dark": "ollama.png"
        }
      },
      {
        "command": "generate-local-commit.openSettings",
        "title": "Open Git Commit Local Settings"
      },
      {
        "command": "generate-local-commit.showCommitDiff",
        "title": "Show Commit Diff"
      },
      {
        "command": "generate-local-commit.quickChangeModel",
        "title": "Quick: Change Model",
        "icon": "$(symbol-parameter)"
      },
      {
        "command": "generate-local-commit.quickChangeEndpoint",
        "title": "Quick: Change Endpoint",
        "icon": "$(server)"
      },
      {
        "command": "generate-local-commit.quickPullModel",
        "title": "Quick: Pull Model",
        "icon": "$(cloud-download)"
      },
      {
        "command": "generate-local-commit.quickListModels",
        "title": "Quick: List Models",
        "icon": "$(list-unordered)"
      },
      {
        "command": "generate-local-commit.quickSetTemperature",
        "title": "Quick: Set Temperature",
        "icon": "$(thermometer)"
      },
      {
        "command": "generate-local-commit.quickResetSettings",
        "title": "Quick: Reset Settings",
        "icon": "$(refresh)"
      },
      {
        "command": "generate-local-commit.enhanceCommitMessage",
        "title": "Enhance Git Message",
        "icon": "$(arrow-up)"
      },
      {
        "command": "generate-local-commit.reduceCommitMessage",
        "title": "Reduce Message Length",
        "icon": "$(arrow-down)"
      },
      {
        "command": "generate-local-commit.quickSetMaxTokens",
        "title": "Quick: Set Max Tokens",
        "icon": "$(symbol-numeric)"
      }
    ],
    "menus": {
      "scm/title": [
        {
          "when": "scmProvider == 'git'",
          "command": "generate-local-commit.generateCommitMessage",
          "group": "navigation"
        },
        {
          "when": "scmProvider == 'git'",
          "command": "generate-local-commit.enhanceCommitMessage",
          "group": "navigation"
        },
        {
          "when": "scmProvider == 'git'",
          "command": "generate-local-commit.reduceCommitMessage",
          "group": "navigation"
        },
        {
          "when": "scmProvider == 'git'",
          "command": "generate-local-commit.openSettings",
          "group": "2_configure"
        }
      ],
      "commandPalette": [
        {
          "command": "generate-local-commit.generateCommitMessage",
          "when": "workbenchState != empty"
        },
        {
          "command": "generate-local-commit.openSettings"
        },
        {
          "command": "generate-local-commit.quickChangeModel"
        },
        {
          "command": "generate-local-commit.quickChangeEndpoint"
        },
        {
          "command": "generate-local-commit.quickPullModel"
        },
        {
          "command": "generate-local-commit.quickListModels"
        },
        {
          "command": "generate-local-commit.quickSetTemperature"
        },
        {
          "command": "generate-local-commit.quickResetSettings"
        },
        {
          "command": "generate-local-commit.enhanceCommitMessage"
        },
        {
          "command": "generate-local-commit.reduceCommitMessage"
        },
        {
          "command": "generate-local-commit.quickSetMaxTokens"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "generate-local-commit",
          "title": "Git Commit Local",
          "icon": "$(git-commit)"
        }
      ]
    },
    "views": {
      "generate-local-commit": [
        {
          "id": "generate-local-commit.quickActionsView",
          "name": "Quick Actions"
        },
        {
          "id": "generate-local-commit.historyView",
          "name": "Recent Commits"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "generate-local-commit.quickActionsView",
        "contents": "Quick actions for Git Commit Local.\n[Open Settings](command:generate-local-commit.openSettings)",
        "when": "workbenchState == empty"
      }
    ],
    "configuration": {
      "title": "Git Commit Local",
      "properties": {
        "generate-local-commit.endpoint": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "Ollama API endpoint URL"
        },
        "generate-local-commit.model": {
          "type": "string",
          "default": "qwen2.5:3b",
          "description": "Ollama model to use for generating commit messages"
        },
        "generate-local-commit.maxTokens": {
          "type": "number",
          "default": 300,
          "description": "Maximum number of tokens to generate"
        },
        "generate-local-commit.temperature": {
          "type": "number",
          "default": 0.2,
          "minimum": 0,
          "maximum": 2,
          "description": "Temperature for text generation (higher means more creative, lower means more deterministic)"
        },
        "generate-local-commit.contextRange": {
          "type": "number",
          "default": 3,
          "minimum": 0,
          "maximum": 100,
          "description": "Number of context lines to include above and below each change in the diff"
        },
        "generate-local-commit.promptTemplate": {
          "type": "string",
          "default": "You are an AI assistant specialized in creating concise and meaningful git commit messages. When provided with a git diff, your task is to generate a clear commit message following the conventional commit format.\n\nYour commit messages should:\n1. Follow the pattern: type(optional scope): description\n2. Use one of these types: feat, fix, docs, style, refactor, perf, test, build, ci, chore\n3. Focus on WHAT changed and WHY, not HOW it was implemented\n4. Be under 50 characters whenever possible\n5. Use imperative, present tense (e.g., \"add feature\" not \"added feature\")\n6. Generate the git commit message inside [COMMIT][/COMMIT] tags based on the content of the diff provided inside [DIFF][/DIFF] tags\n\nTypes explained:\n- feat: A new feature or significant enhancement\n- fix: A bug fix\n- docs: Documentation changes only\n- style: Changes that don't affect code meaning (formatting, whitespace)\n- refactor: Code changes that neither fix bugs nor add features\n- perf: Performance improvements\n- test: Adding or correcting tests\n- build: Changes to build system or dependencies\n- ci: Changes to CI configuration/scripts\n- chore: Routine maintenance tasks, dependency updates\n\n[DIFF]${diff}[/DIFF]",
          "description": "Template for the prompt sent to Ollama. IMPORTANT: Must contain '${diff}' placeholder which will be replaced with the actual diff."
        },
        "generate-local-commit.useConventionalCommits": {
          "type": "boolean",
          "default": true,
          "description": "Follow conventional commits format (e.g., feat:, fix:, docs:)"
        },
        "generate-local-commit.showDiffConfirmation": {
          "type": "boolean",
          "default": false,
          "description": "Show a confirmation dialog with the diff before generating the commit message"
        },
        "generate-local-commit.enhancePrompt": {
          "type": "string",
          "default": "You are an expert Git developer specialized in writing professional commit messages. Your task is to enhance the provided commit message to make it more descriptive, clear, and follow Git best practices while maintaining its original intent.\n\nGit commit message enhancement guidelines:\n1. Follow the 50/72 rule: subject line ≤50 chars, body lines ≤72 chars\n2. Use conventional commit format: type(scope): description\n3. Start with imperative mood verbs (add, fix, update, remove, refactor, etc.)\n4. Capitalize the first letter of the subject line\n5. Don't end the subject line with a period\n6. Be specific about what changed and why (not how)\n7. Reference issue numbers, breaking changes, or affected components when relevant\n8. Use present tense as if completing the sentence \"This commit will...\"\n\nCommon Git commit types:\n- feat: new feature or functionality\n- fix: bug fix or error correction\n- docs: documentation changes\n- style: formatting, whitespace, missing semicolons (no code change)\n- refactor: code restructuring without changing functionality\n- perf: performance improvements\n- test: adding or updating tests\n- build: build system or dependency changes\n- ci: continuous integration changes\n- chore: maintenance, tooling, or housekeeping\n\nCurrent commit message: ${message}\n\nPlease provide an enhanced Git commit message that follows these best practices:",
          "description": "Template for the prompt sent to Ollama to enhance commit messages. IMPORTANT: Must contain '${message}' placeholder which will be replaced with the actual commit message."
        },
        "generate-local-commit.reducePrompt": {
          "type": "string",
          "default": "You are an expert Git developer specialized in writing concise, professional commit messages. Your task is to shorten the provided commit message while preserving its core meaning and following Git best practices.\n\nGit commit message reduction guidelines:\n1. Target 50 characters or less for the subject line (Git's golden rule)\n2. Maintain conventional commit format: type(scope): description\n3. Keep imperative mood verbs (add, fix, update, remove, refactor, etc.)\n4. Preserve the commit type (feat, fix, docs, style, refactor, perf, test, build, ci, chore)\n5. Remove redundant words like \"this commit\", \"changes\", \"updates\"\n6. Keep essential technical details (component names, key functionality)\n7. Remove filler words (very, really, just, simply, etc.)\n8. Focus on WHAT changed, not HOW it was implemented\n9. Capitalize first letter, no ending period\n10. If multi-line, keep the most important information in the subject line\n\nAbbreviation suggestions:\n- \"implement\" → \"add\"\n- \"modification\" → \"update\"\n- \"enhancement\" → \"improve\"\n- \"configuration\" → \"config\"\n- \"functionality\" → \"feature\"\n- \"documentation\" → \"docs\"\n\nCurrent commit message: ${message}\n\nPlease provide a shorter, more concise Git commit message following these guidelines:",
          "description": "Template for the prompt sent to Ollama to reduce commit message length. IMPORTANT: Must contain '${message}' placeholder which will be replaced with the actual commit message."
        }
      }
    }
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "vscode-test",
    "package": "vsce package"
  },
  "devDependencies": {
    "@types/vscode": "^1.101.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.0.10",
    "eslint": "^9.30.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0"
  },
  "dependencies": {
    "axios": "^1.10.0"
  },
  "license": "MIT"
}
